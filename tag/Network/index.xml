<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Network | Terry Tang</title><link>http://www.guozet.me/tag/Network/</link><atom:link href="http://www.guozet.me/tag/Network/index.xml" rel="self" type="application/rss+xml"/><description>Network</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>guozet.me Â© 2020</copyright><lastBuildDate>Sun, 15 Jul 2018 11:38:13 +0000</lastBuildDate><image><url>http://www.guozet.me/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url><title>Network</title><link>http://www.guozet.me/tag/Network/</link></image><item><title>How to install RAMcloud on Ubuntu16.04</title><link>http://www.guozet.me/post/How-to-install-RAMcloud-on-Ubuntu16-04/</link><pubDate>Sun, 15 Jul 2018 11:38:13 +0000</pubDate><guid>http://www.guozet.me/post/How-to-install-RAMcloud-on-Ubuntu16-04/</guid><description>&lt;h1 id="introduce">Introduce&lt;/h1>
&lt;p>
&lt;a href="https://github.com/PlatformLab/RAMCloud" target="_blank" rel="noopener">RAMCloud&lt;/a> is a new class of super-high-speed storage for large-scale datacenter applications. It is designed for applications in which a large number of servers in a datacenter need low-latency access to a large durable datastore. RAMCloud offers the following properties:&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-16-47-41.png" alt="">&lt;/p>
&lt;p>Project Link:
&lt;a href="https://ramcloud.atlassian.net/wiki/spaces/RAM/overview" target="_blank" rel="noopener">RAMCloud&lt;/a>&lt;/p>
&lt;p>Office Installing introduce:
&lt;a href="https://ramcloud.atlassian.net/wiki/spaces/RAM/pages/6848614/General&amp;#43;Information&amp;#43;for&amp;#43;Developers" target="_blank" rel="noopener">General Information for Developers&lt;/a>&lt;/p>
&lt;p>I have written the shell script to install the RAMCloud on Ubuntu 16.04 or Ubuntu18.04. If you want to build the RAMCloud as soon as possible, please fell free to use my repo on the github. Please read the README.md file in the repo and know how to use the scripts to help you.&lt;/p>
&lt;ul>
&lt;li>Github repo Link:
&lt;a href="https://github.com/guozetang/RAMCloud_Ubuntu16.04" target="_blank" rel="noopener">RAMCloud For Ubuntu16.04&lt;/a>&lt;/li>
&lt;li>Bitbucket repo Link:
&lt;a href="https://bitbucket.org/guozetang/ramcloud/src/master/" target="_blank" rel="noopener">RAMCloud For Ubuntu16.04&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you have some issue with this script, please send
&lt;a href="guoze.work@gmail.com">email&lt;/a> to me. I will reply it as soon as possible. In addtion, please read the next introduce about how to install Ramcloud by command if you want to understand each step to install RAMCloud.&lt;/p>
&lt;hr>
&lt;h1 id="installing-ramcloud-on-ubuntu1604">Installing Ramcloud on Ubuntu16.04&lt;/h1>
&lt;h2 id="necessary-tools">Necessary Tools&lt;/h2>
&lt;ul>
&lt;li>GNU Make (Anything reasonably recent)&lt;/li>
&lt;li>GNU g++ (4.9.x)&lt;/li>
&lt;li>git (&amp;gt;= 1.6.0)&lt;/li>
&lt;li>Perl (Anything reasonably recent)
&lt;ul>
&lt;li>For mergedeps.pl, which automatically inserts included headers in source files into the make dependencies.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Python 2.6, epydoc&lt;/li>
&lt;li>Boost
&lt;ul>
&lt;li>If you&amp;rsquo;re having issues with Boost on Ubuntu, check boost ticket #3844.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pcre&lt;/li>
&lt;li>Doxygen 1.7.1&lt;/li>
&lt;li>protocol buffers
&lt;ul>
&lt;li>If you&amp;rsquo;re getting lots of undefined reference errors during linking, it&amp;rsquo;s likely that your libprotobuf is compiled with a different library ABI than RAMCloud. Check GCC&amp;rsquo;s Dual ABI page and the &amp;ldquo;GLIBCXX_USE_CXX11_ABI&amp;rdquo; flag in GNUMakefile.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ZooKeeper&lt;/li>
&lt;li>java and javac (&amp;gt;= 1.7.0_25)&lt;/li>
&lt;/ul>
&lt;p>If your system is Ubuntu 15.04 or 14.04, then you can just use this command to install these packets in your system.&lt;/p>
&lt;pre>&lt;code class="language-bash">apt-get install build-essential git-core doxygen=1.7.1 libpcre3-dev protobuf-compiler libprotobuf-dev libcrypto++-dev libevent-dev libboost-all-dev libgtest-dev libzookeeper-mt-dev zookeeper libssl-dev
&lt;/code>&lt;/pre>
&lt;h2 id="analyze">Analyze&lt;/h2>
&lt;p>I can&amp;rsquo;t use this command to work on the Ubuntu 16.04. In addtion, I hope I can use the RAMCloud on any Ubuntu system. It means that it should be worked on Ubuntu 16.04 or 18.04. So I need to compile these packet by g++ or gcc or Cmake.&lt;/p>
&lt;hr>
&lt;h2 id="install-dependency">Install Dependency&lt;/h2>
&lt;h3 id="install-build-essential-libssl-dev-and-git">Install build-essential, libssl-dev and git&lt;/h3>
&lt;p>We can get these two libs on Ubuntu 16.06 or 18.04. So we just need to use &lt;code>apt-get&lt;/code> to get these lib.&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt-get -y build-essential libssl-dev git
&lt;/code>&lt;/pre>
&lt;h3 id="install-gccg-49">Install gcc/g++ 4.9&lt;/h3>
&lt;p>The RAMCloud source code used some features in the C++11 Standard. As a result, we need to make sure the &lt;code>gcc/g++&lt;/code> version have support the &lt;code>C++11&lt;/code> Standard. Then we choose the &lt;code>gcc/g++ 4.9&lt;/code> to install. Please follow the commands.&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt-get install -y software-properties-common
sudo add-apt-repositocry -y ppa:ubuntu-toolchain-r/test
sudo apt-get update
mv /usr/bin/gcc /usr/bin/gcc.bak
mv /usr/bin/g++ /usr/bin/g++.bak
sudo apt-get install -y gcc-4.9
sudo apt-get install -y g++-4.9
lnif /usr/bin/g++-4.9 /usr/bin/g++
lnif /usr/bin/gcc-4.9 /usr/bin/gcc
g++ -v
gcc -v
&lt;/code>&lt;/pre>
&lt;p>If the &lt;code>g++ -v&lt;/code> command can output the information like the followed graph. Then it means that you have installed the &lt;code>g++ 4.9&lt;/code> correctly.&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-16-35-42.png" alt="">&lt;/p>
&lt;p>If the &lt;code>gcc -v&lt;/code> command can output the information like the followed graph. Then it means that you have installed the &lt;code>gcc 4.9&lt;/code> correctly.&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-16-37-27.png" alt="">&lt;/p>
&lt;p>You must to make sure you have installed the &lt;code>gcc&lt;/code> and &lt;code>g++&lt;/code> correctly when you want to continue the next steps.&lt;/p>
&lt;h3 id="install-java-and-javac">Install Java and Javac&lt;/h3>
&lt;pre>&lt;code class="language-bash">sudo apt-add-repository -y ppa:webupd8team/java
sudo apt-get update
install_dependency oracle-java8-installer
java -version
&lt;/code>&lt;/pre>
&lt;p>If the &lt;code>java -version&lt;/code> command can output the information like the followed graph. Then it means that you have installed the &lt;code>java&lt;/code> correctly.&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-16-40-29.png" alt="">&lt;/p>
&lt;h3 id="install-cmake">Install Cmake&lt;/h3>
&lt;p>We will use &lt;code>Cmake&lt;/code> to compile the &lt;code>Doxygen 1.7.2&lt;/code> in the next steps.&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt-get install -y software-properties-common
sudo add-apt-repository -y ppa:george-edison55/cmake-3.x
sudo apt-get update
sudo apt-get install -y cmake
cmake --version
&lt;/code>&lt;/pre>
&lt;p>Use &lt;code>cmake --version&lt;/code> to check the version of cmake. If the &lt;code>cmake --version&lt;/code> command can output the informaton like the followed graph. Then it means that you have installed the &lt;code>cmake&lt;/code> correctly.&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-16-49-08.png" alt="">&lt;/p>
&lt;hr>
&lt;h3 id="download-the-packages-which-will-be-need-in-the-next-few-steps">Download the packages which will be need in the next few steps.&lt;/h3>
&lt;pre>&lt;code class="language-bash">git clone git@bitbucket.org:guozetang/ramcloud.git
cd ./ramcloud/packages/
&lt;/code>&lt;/pre>
&lt;p>When you get in to this director, you can find these packages in this director.
&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-20-16-41.png" alt="">&lt;/p>
&lt;p>We will use these packages in the next steps.&lt;/p>
&lt;h3 id="install-pcre">Install Pcre&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar -xzvf pcre-8.42.tar.gz
cd pcre-8.42
./configure --prefix=/usr/local/pcre
make
sudo make install
sudo echo &amp;quot;/usr/local/pcre/lib/&amp;quot; &amp;gt; /etc/ld.so.conf.d/pcre.conf
&lt;/code>&lt;/pre>
&lt;h3 id="install-python26">Install Python2.6&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar zxvf Python-2.6.6.tgz
cd Python-2.6.6
./configure --prefix=/usr/local/python2.6
make
sudo make install
sudo ln -s /usr/local/python2.6/bin/python2.6 /usr/bin/python2.6 -f
config_ld_lib /usr/local/python2.6/lib/ /etc/ld.so.conf.d/python2.6.conf
python2.6 --version
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-07-15-How-to-install-RAMcloud-on-Ubuntu16-04/2018-09-08-17-08-22.png" alt="">&lt;/p>
&lt;h3 id="install-boost">Install Boost&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar -xvf boost_1_52_0.tar
cd boost_1_52_0
sudo ./bootstrap.sh
sudo ./b2 -j
sudo ./b2 install --prefix=/usr/local/boost_1_52_0
sudo echo &amp;quot;/usr/local/boost_1_52_0/lib/&amp;quot; &amp;gt; /etc/ld.so.conf.d/boost_1_52_0.conf
&lt;/code>&lt;/pre>
&lt;h3 id="install-doxygen172">Install Doxygen1.7.2&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar -xzvf doxygen.tar.gz
cd doxygen
cd build
cmake -G &amp;quot;Unix Makefiles&amp;quot; ..
make
sudo make Install
&lt;/code>&lt;/pre>
&lt;h3 id="install-protocol-buffers">Install Protocol Buffers&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar -xzvf protobuf-2.6.1.tar.gz
cd $CURRENT_DIR/packages/protobuf-2.6.1
./configure --prefix=/usr/local/protobuf
make
make check
sudo make install
sudo echo &amp;quot;/usr/local/protobuf/lib/&amp;quot; &amp;gt; /etc/ld.so.conf.d/protobuf.conf
sudo ln -s /usr/local/protobuf/bin/protoc /usr/bin/protoc -f
&lt;/code>&lt;/pre>
&lt;h3 id="install-zookeeper">Install Zookeeper&lt;/h3>
&lt;pre>&lt;code class="language-bash">tar -xzvf zookeeper-3.3.6.tar.gz
cd zookeeper-3.3.6/src/c
./configure --prefix=/usr/local/zookeeper
make
sudo make install
sudo echo &amp;quot;/usr/local/zookeeper/lib/&amp;quot; &amp;gt; /etc/ld.so.conf.d/zookeeper.conf
&lt;/code>&lt;/pre>
&lt;p>This last command &lt;code>sudo echo &amp;quot;/usr/local/zookeeper/lib/&amp;quot; &amp;gt; /etc/ld.so.conf.d/zookeeper.conf&lt;/code> can make the other application can find the &lt;code>zookeeper lib&lt;/code> in the system.&lt;/p>
&lt;h2 id="config-the-path">Config the Path&lt;/h2>
&lt;p>Add the &lt;code>include path&lt;/code>,&lt;code>library path&lt;/code> in the &lt;code>/etc/profile&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-bash">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/pcre/lib/:/usr/local/python2.6/lib/:/usr/local/boost_1_52_0/lib/:/usr/local/protobuf/lib/:/usr/local/zookeeper/lib/
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/pcre/lib/:/usr/local/python2.6/lib/:/usr/local/boost_1_52_0/lib/:/usr/local/protobuf/lib/:/usr/local/zookeeper/lib/
export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/local/pcre/include/:/usr/local/python2.6/include/:/usr/local/boost_1_52_0/include/:/usr/local/protobuf/include/:/usr/local/zookeeper/include/c-client-src/
export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/local/pcre/include/:/usr/local/python2.6/include/:/usr/local/boost_1_52_0/include/:/usr/local/protobuf/include/:/usr/local/zookeeper/include/c-client-src/
export PATH=$PATH:/usr/local/pcre/bin/:/usr/local/python2.6/bin/:/usr/local/protobuf/bin/:/usr/local/zookeeper/bin/
export PKG_CONFIG_PATH=:/usr/local/protobuf/lib/pkgconfig/
&lt;/code>&lt;/pre>
&lt;h2 id="install-ramcloud">Install RAMCloud&lt;/h2>
&lt;pre>&lt;code class="language-bash">git clone https://github.com/PlatformLab/RAMCloud.git
cd RAMCloud
make -j12 DEBUG=no
&lt;/code>&lt;/pre></description></item><item><title>Broæºä»£ç åæ---IPæ°æ®åå¤çæµç¨</title><link>http://www.guozet.me/post/Bro-source-codes-walkthought/</link><pubDate>Sat, 09 Jun 2018 01:02:39 +0000</pubDate><guid>http://www.guozet.me/post/Bro-source-codes-walkthought/</guid><description>&lt;h1 id="åè¨">åè¨&lt;/h1>
&lt;p>Broæ¯ä¸æ¬¾éå¸¸ä¼ç§çç½ç»åè®®åæå¨ãBroéé¢çBinpacè§£æå¨å¯ä»¥å¾æ¹ä¾¿çè®©æä»¬ä½¿ç¨Binpacè¯­è¨ä¹¦ååè®®è§£æå¨ï¼å¹¶éè¿Binpacè½¬æ¢æC++è¯­è¨ï¼è¿å¨ä½¿ç¨ä¸­è½å¤å¾å¤§ç¨åº¦çåå°å¼åæ¶é´ï¼ä¹å¯ä»¥é¿åæåå®¹æèèä¸å¨çé®é¢ãä½æ¯å¨ä½¿ç¨Binpacä¹åï¼æä»¬éè¦å»äºè§£Broå¨å¤çç½ç»æ°æ®åçæ¶åçå¤çæµç¨ï¼è½å¤æ¹ä¾¿æä»¬å¨Binpacä½¿ç¨ä¸­å»æåBroè¦åçé¨åï¼çææä»¬éè¦çåè®®è§£æå¨çC++æä»¶ã&lt;/p>
&lt;h1 id="æºä»£ç éè¯»">æºä»£ç éè¯»&lt;/h1>
&lt;blockquote>
&lt;p>éç¹ï¼å³æ³¨äºç½ç»æ°æ®åçå¤çé¨åä»£ç &lt;/p>
&lt;/blockquote>
&lt;h2 id="broçç½ç»æ°æ®åå¤çæµç¨">Broçç½ç»æ°æ®åå¤çæµç¨&lt;/h2>
&lt;h3 id="broå¯å¨åå§åå½æ°maincc">Broå¯å¨åå§åå½æ°main.cc&lt;/h3>
&lt;blockquote>
&lt;p>int main(int argc, char** argv) (main.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09Bro-Main.png" alt="2018-06-09Bro-Main">&lt;/p>
&lt;p>å¨Broç&lt;code>main.cc&lt;/code>æä»¶éé¢çMainå½æ°æ¯Broå¯å¨è¿ç¨ä¸­çé¦åæ§è¡çå½æ°ï¼èå¨è¿ä¸ª&lt;code>main&lt;/code>å½æ°éé¢ï¼åæä»¬çæ°æ®åå¤çé¨åç¸å³å¯åçå½æ°æ¯&lt;code>net_run()&lt;/code>å½æ°ï¼è¿ä¸ªå½æ°æ¯ä¸ä¸ªä¸ç´å¾ªç¯çå½æ°ï¼ä¸æ¦åºæ¥è¿ä¸ªå½æ°ä¹åï¼åé¢å·®ä¸å¤å°±ç»æäºãæ¥ä¸æ¥éè¯»è¯¥å½æ°ä»£ç ã&lt;/p>
&lt;h3 id="æ°æ®åå¤ççä¸»è¦å½æ°-net_run">æ°æ®åå¤ççä¸»è¦å½æ°ï¼ net_run()&lt;/h3>
&lt;blockquote>
&lt;p>net_run() (Net.cc)&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-cpp">void net_run()
{
set_processing_status(&amp;quot;RUNNING&amp;quot;, &amp;quot;net_run&amp;quot;);
while ( iosource_mgr-&amp;gt;Size() ||
(BifConst::exit_only_after_terminate &amp;amp;&amp;amp; ! terminating) )
{
double ts;
iosource::IOSource* src = iosource_mgr-&amp;gt;FindSoonest(&amp;amp;ts); //æå¼ä¹åï¼è·åæä»¥çç½å¡æèæä»¶çå¥æ
current_iosrc = src;
bool communication_enabled = using_communication;
if ( src ) //å¦æè¿ä¸ªå¥æä¸æ¯ç©ºçè¯å°±è¿å¥Process()å½æ°
src-&amp;gt;Process(); // which will call net_packet_dispatch()
else if ( reading_live &amp;amp;&amp;amp; ! pseudo_realtime)
{ // live but no source is currently active
double ct = current_time();
if ( ! net_is_processing_suspended() )
{
net_update_time(ct);
expire_timers();
usleep(1); // Just yield.
}
}
else if ( (have_pending_timers || communication_enabled) &amp;amp;&amp;amp;
! pseudo_realtime )
{
net_update_time(current_time());
expire_timers();
if ( ! communication_enabled )
usleep(100000);
else
usleep(1000);
mgr.Drain();
processing_start_time = 0.0; // = &amp;quot;we're not processing now&amp;quot;
current_dispatched = 0;
current_iosrc = 0;
extern void termination_signal();
if ( signal_val == SIGTERM || signal_val == SIGINT )
termination_signal();
if ( ! reading_traces )
have_pending_timers = timer_mgr-&amp;gt;Size() &amp;gt; 0;
}
net_get_final_stats();
}
&lt;/code>&lt;/pre>
&lt;p>è¿ä¸ªå½æ°å¹¶ä¸æ¯å¾é¿ï¼ä»ç»éè¯»ï¼æä»¬å¯ä»¥åç°æä»¬åªéè¦å³æ³¨å½æ°&lt;code>src-&amp;gt;Process&lt;/code>, å¶ä¸­&lt;code>src&lt;/code>æ¯&lt;code>iosource::IOSource* src = iosource_mgr-&amp;gt;FindSoonest(&amp;amp;ts);&lt;/code>ç¸å½äºå°±æ¯æå¼æä»¶æèç½å¡æ°æ®çå¥æï¼æä»¶å¥ææèç½å¡çå¥æï¼ãæä»¥å®çå¤çå½æ°ä¹å°±æ¯æä»¬æ³è¦çæ°æ®å¤çè¿ç¨äºã&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-Bro_net_run.png" alt="2018-06-09-Bro_net_run">&lt;/p>
&lt;p>æ¥ä¸æ¥ç&lt;code>Process&lt;/code>å½æ°,å¨è¿ä¸ªå½æ°ä¸­æä»¬å¯ä»¥çå°å®å¤çäºPacketï¼å¤çå®ä¹åï¼è°ç¨äºä¸ä¸ª&lt;code>DoneWithPacket()&lt;/code>å½æ°ï¼ä½æä»¬éç¹æ¯å³æ³¨çå¤çè¿ç¨ï¼æä»¥æä»¬éè¦å³æ³¨å½æ°&lt;code>net_packet_dispatch(net_packet_dispatch(current_pseudo, &amp;amp;current_packet, this);)&lt;/code>,å¨è¿ä¸ªå½æ°ä¸­ä¼ å¥äºå½åæ°æ®åçæéã&lt;/p>
&lt;blockquote>
&lt;p>void Pktsrc::Process() (Pktsrc.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-src_process.png" alt="2018-06-09-src_process">&lt;/p>
&lt;p>æ¥ä¸æ¥éè¯»&lt;code>net_packet_dispatch(current_pseudo, &amp;amp;current_packet, this);&lt;/code>çå¤çè¿ç¨ãè¿ä¸ªå½æ°æ¯å¨&lt;code>net.cc&lt;/code>æä»¶ä¸­ï¼å&lt;code>net_run()&lt;/code>å½æ°æ¯å¨åä¸ä¸ªæä»¶ä¸­ã&lt;/p>
&lt;blockquote>
&lt;p>void net_packet_dispatch(double t, const Packet* pkt, iosource::PktSrc* src_ps) (net.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-net_packet_dispatch.png" alt="2018-06-09-net_packet_dispatch">&lt;/p>
&lt;p>å¨&lt;code>net_packet_dispatch()&lt;/code>å½æ°ä¸­ï¼æä¸ä¸ªç¹å«éè¦çæ°æ®ç»æ&lt;code>sessions&lt;/code>,è¿æ¯å¨&lt;code>sessions.cc&lt;/code>æä»¶ä¸­å®ä¹çä¸ä¸ªå¨å±åéã&lt;br>
&lt;code>NetSessions* sessions;&lt;/code>&lt;br>
å¨è¿éæä»¬éè¦éè¯»ä¸ä¸ç»æä½&lt;code>NetSessions&lt;/code>,è¿ä¸ªç»æä½æ¯å¨&lt;code>sessions.h&lt;/code>æä»¶ä¸­å®ä¹çãå¨è¿ä¸ªç»æä½ä¸­æä¸ä¸ªç¹å«éè¦çå½æ°&lt;code>NextPacket&lt;/code>,è¿ä¸ªå½æ°ä¹æ¯å¨&lt;code>net_packet_dispatch&lt;/code>ä¸­è¢«è°ç¨çæéè¦çå½æ°ã&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-NetSessions_class.png" alt="2018-06-09-NetSessions_class">&lt;/p>
&lt;p>æ¥ä¸æ¥éè¯»å³é®å½æ°ï¼&lt;code>NextPacket&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>void NetSessions::NextPacket(double t, const Packet* pkt) (sessions.cc)&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-cpp">void NetSessions::NextPacket(double t, const Packet* pkt) //tå¯è½æ¯æ¶é´æ³
{
SegmentProfiler(segment_logger, &amp;quot;dispatching-packet&amp;quot;);
.....
if ( pkt-&amp;gt;hdr_size &amp;gt; pkt-&amp;gt;cap_len ) //å¼å§å¤æ­åçå¤§å°é®é¢
{
Weird(&amp;quot;truncated_link_frame&amp;quot;, pkt);
return;
}
uint32 caplen = pkt-&amp;gt;cap_len - pkt-&amp;gt;hdr_size;
//cap_lenæå°çæ°æ®åçå¤§å°ï¼ hdr_size --- IPå¤´éé¢çæ¾ç¤ºé¿åº¦
if ( pkt-&amp;gt;l3_proto == L3_IPV4 )
{
if ( caplen &amp;lt; sizeof(struct ip) )
{
Weird(&amp;quot;truncated_IP&amp;quot;, pkt);
return;
}
const struct ip* ip = (const struct ip*) (pkt-&amp;gt;data + pkt-&amp;gt;hdr_size);
IP_Hdr ip_hdr(ip, false);
DoNextPacket(t, pkt, &amp;amp;ip_hdr, 0);
}
else if ( pkt-&amp;gt;l3_proto == L3_IPV6 )
{
.....
DoNextPacket(t, pkt, &amp;amp;ip_hdr, 0);
}
else if ( pkt-&amp;gt;l3_proto == L3_ARP )
{
if ( arp_analyzer )
arp_analyzer-&amp;gt;NextPacket(t, pkt);
}
.......
if ( dump_this_packet &amp;amp;&amp;amp; ! record_all_packets )
DumpPacket(pkt);
}
&lt;/code>&lt;/pre>
&lt;p>ç»è¿åæï¼ä¸è¿°çä»£ç ä¸­ï¼æéè¦çæ¯å½æ°&lt;code>DoNextPacket(t, pkt, &amp;amp;ip_hdr, 0)&lt;/code>,ææ°æ®åä¼ å¥ï¼æåipå¤´çæéä¼ å¥ãè¿ä¸ªå½æ°å¯ä»¥è¯´æ¯æä»¬è¦æ¾çæéè¦çå½æ°äºï¼å¨è¿ä¸ªå½æ°ä¸­ï¼å®æäº&lt;code>IPå¤´&lt;/code>éç»å·¥ä½ã&lt;/p>
&lt;blockquote>
&lt;p>void NetSessions::DoNextPacket(double t, const Packet* pkt, const IP_Hdr* ip_hdr,
const EncapsulationStack* encapsulation) (Sessions.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-DoNextPacket_Main.png" alt="2018-06-09-DoNextPacket_Main">
è¿ä¸ªå½æ°å·²ç»å¼å§å¤çIPæ°æ®åäº,å¨è¿ä¸ªå½æ°éé¢ï¼æä¸»è¦çé¨åæ¯å¤ççæ®µçé¨åå·¥ä½ï¼&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-DoNextPacket_fuction.png" alt="2018-06-09-DoNextPacket_fuction">&lt;/p>
&lt;p>ååå§å&lt;code>f&lt;/code>ä¹åï¼æ§è¡äºï¼&lt;/p>
&lt;pre>&lt;code class="language-cpp"> if ( discarder &amp;amp;&amp;amp; discarder-&amp;gt;NextPacket(ip_hdr, len, caplen) )
return;
FragReassembler* f = 0;
if ( ip_hdr-&amp;gt;IsFragment() )
{
dump_this_packet = 1; // always record fragments
&lt;/code>&lt;/pre>
&lt;p>ä¸»è¦çä¸ä¸&lt;code>NextPacketå½æ°&lt;/code>çæ§è¡è¿ç¨:
å¨è¿ä¸ªå½æ°ä¸­ä¸»è¦æ£æ¥äºIPæ°æ®åï¼å¤æ­æ¯TCPè¿æ¯UDPï¼ç¶åå¤çIPåµå¥çæåµã&lt;/p>
&lt;pre>&lt;code class="language-cpp">
int Discarder::NextPacket(const IP_Hdr* ip, int len, int caplen)
{
int discard_packet = 0;
if ( check_ip )
{
val_list* args = new val_list;
args-&amp;gt;append(ip-&amp;gt;BuildPktHdrVal());
try
{
discard_packet = check_ip-&amp;gt;Call(args)-&amp;gt;AsBool();
}
catch ( InterpreterException&amp;amp; e )
{
discard_packet = false;
}
delete args;
if ( discard_packet )
return discard_packet;
}
int proto = ip-&amp;gt;NextProto();
if ( proto != IPPROTO_TCP &amp;amp;&amp;amp; proto != IPPROTO_UDP &amp;amp;&amp;amp;
proto != IPPROTO_ICMP )
// This is not a protocol we understand.
return 0;
// XXX shall we only check the first packet???
if ( ip-&amp;gt;IsFragment() )
// Never check any fragment.
return 0;
int ip_hdr_len = ip-&amp;gt;HdrLen();
len -= ip_hdr_len; // remove IP header
caplen -= ip_hdr_len;
int is_tcp = (proto == IPPROTO_TCP);
int is_udp = (proto == IPPROTO_UDP);
int min_hdr_len = is_tcp ?
sizeof(struct tcphdr) :
(is_udp ? sizeof(struct udphdr) : sizeof(struct icmp));
if ( len &amp;lt; min_hdr_len || caplen &amp;lt; min_hdr_len )
// we don't have a complete protocol header
return 0;
// Where the data starts - if this is a protocol we know about,
// this gets advanced past the transport header.
const u_char* data = ip-&amp;gt;Payload();
if ( is_tcp )
{
if ( check_tcp )
{
const struct tcphdr* tp = (const struct tcphdr*) data;
int th_len = tp-&amp;gt;th_off * 4;
val_list* args = new val_list;
args-&amp;gt;append(ip-&amp;gt;BuildPktHdrVal());
args-&amp;gt;append(BuildData(data, th_len, len, caplen));
try
{
discard_packet = check_tcp-&amp;gt;Call(args)-&amp;gt;AsBool();
}
catch ( InterpreterException&amp;amp; e )
{
discard_packet = false;
}
delete args;
}
}
else if ( is_udp )
{
if ( check_udp )
{
const struct udphdr* up = (const struct udphdr*) data;
int uh_len = sizeof (struct udphdr);
val_list* args = new val_list;
args-&amp;gt;append(ip-&amp;gt;BuildPktHdrVal());
args-&amp;gt;append(BuildData(data, uh_len, len, caplen));
try
{
discard_packet = check_udp-&amp;gt;Call(args)-&amp;gt;AsBool();
}
catch ( InterpreterException&amp;amp; e )
{
discard_packet = false;
}
delete args;
}
}
else
{
if ( check_icmp )
{
const struct icmp* ih = (const struct icmp*) data;
val_list* args = new val_list;
args-&amp;gt;append(ip-&amp;gt;BuildPktHdrVal());
try
{
discard_packet = check_icmp-&amp;gt;Call(args)-&amp;gt;AsBool();
}
catch ( InterpreterException&amp;amp; e )
{
discard_packet = false;
}
delete args;
}
}
return discard_packet;
}
&lt;/code>&lt;/pre>
&lt;p>å¨è¿éä¸»è¦æ¯å³é®æ¯åä¸ªé¨å&lt;/p>
&lt;ul>
&lt;li>FragReassembler* f = 0; å®ä¹çæ®µéç»æ å¿ä½ä¸º0&lt;/li>
&lt;li>f = NextFragment(t, ip_hdr, pkt-&amp;gt;data + pkt-&amp;gt;hdr_size); å¾å°ä¸ä¸ä¸ªçæ®µçæé&lt;/li>
&lt;li>const IP_Hdr* ih = f-&amp;gt;ReassembledPkt();&lt;/li>
&lt;li>FragReassemblerTracker frt(this, f);&lt;/li>
&lt;/ul>
&lt;h3 id="è¯¦ç»åædonextpacketå½æ°çå¤çè¿ç¨">è¯¦ç»åæDoNextPacketå½æ°çå¤çè¿ç¨&lt;/h3>
&lt;h4 id="fragreassemblerç±»ç»æè§£æ">FragReassemblerç±»ç»æè§£æ&lt;/h4>
&lt;blockquote>
&lt;p>class FragReassembler (Frag.h)&lt;/p>
&lt;/blockquote>
&lt;p>éè¦çä¸ä¸&lt;code>FragReassembler&lt;/code>è¿ä¸ªç±»éé¢çæååéä»¥åç¸åºçå½æ°ãå¨è¿ä¸ªç±»å½ä¸­ï¼æéè¦çå½æ°æ¯&lt;code>ReassembledPkt&lt;/code>&lt;br>
&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-class-FragReassembler.png" alt="2018-06-09-class-FragReassembler">&lt;/p>
&lt;h4 id="nextfragmentå½æ°å¤çè¿ç¨">NextFragmentå½æ°å¤çè¿ç¨&lt;/h4>
&lt;blockquote>
&lt;p>FragReassembler* NetSessions::NextFragment(double t, const IP_Hdr* ip,
const u_char* pkt) (sessions.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-FragReassembler-NextFragment.png" alt="2018-06-09-FragReassembler-NextFragment">&lt;/p>
&lt;p>å¨è¿ä¸ªå½æ°ä¸­ï¼ä¸»è¦æ¥æ¾äºfragmentï¼å¦ææ²¡æä¸ä¸ä¸ªï¼å°±æ°å»ºä¸ä¸ªæ°çFragmentå¹¶æ·»å å°&lt;code>fragments&lt;/code>çç»æä½éé¢å»ã&lt;/p>
&lt;h4 id="reassembledpktå½æ°å¤çè¿ç¨">ReassembledPktå½æ°å¤çè¿ç¨&lt;/h4>
&lt;p>è¿ä¸ªå½æ°çå¤çè¿ç¨åªæä¸æ¡ã&lt;/p>
&lt;blockquote>
&lt;p>ReassembledPkt() (Frag.h)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code> const IP_Hdr* ReassembledPkt() { return reassembled_pkt; }&lt;/code>&lt;/p>
&lt;p>å¯¹åºç&lt;code>IP_Hdr* reassembled_pkt;&lt;/code>,æä»¥åªæ¯è¿åå»äºä¸ä¸ªæéå¤´&lt;/p>
&lt;h4 id="fragreassemblertracker-frtthis-få¤çè¿ç¨">FragReassemblerTracker frt(this, f)å¤çè¿ç¨&lt;/h4>
&lt;h4 id="å¤çconnçè¿ç¨">å¤çConnçè¿ç¨&lt;/h4>
&lt;p>å¨&lt;code>DoNextPacket&lt;/code>è¿ä¸ªå½æ°çæåï¼ä¼å»æ°å»ºæèæ¾å°ä¸ä¸ª&lt;code>Conn&lt;/code>å¤çå¤çæ°æ®åãæ§è¡ä»£ç :&lt;/p>
&lt;blockquote>
&lt;p>DoNextPacket() (Sessions.cc)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-06-09-DoNextPacket-new-conn.png" alt="2018-06-09-DoNextPacket-new-conn">&lt;/p>
&lt;p>å¨å¤çConnè¿ä¸ªé¨åçæ¶åï¼æ£æ¥æ¯å¦æå¯¹åºç&lt;code>connection&lt;/code>,æ ¹æ®hashå¼å»æ¥è¯¢&lt;code>HashKey* h = BuildConnIDHashKey(id);&lt;/code>,å¦ææ²¡æå¯¹åºç&lt;code>Conn&lt;/code>ï¼é£ä¹å°±å»æ°å»ºä¸ä¸ªï¼æ°å»ºå®ä¹åï¼æå¥å°connectçé¾è¡¨ä¸­ãå¦æå·²ç»æäºå¯¹åºç&lt;code>Conn&lt;/code>é£å°±éè¦å¤æ­å½åç&lt;code>conn&lt;/code>æ¯ä¸æ¯ä¸æ­£ç¡®çæ°æ®ä»¥åææ²¡æè¢«å¤ç¨ãå¦ææçè¯ï¼å é¤å¯¹åºç&lt;code>conn&lt;/code>çHashå¼ã&lt;/p></description></item><item><title>Complete your first analyzer - RIP in bro</title><link>http://www.guozet.me/post/Write-your-first-Analyzer-en/</link><pubDate>Thu, 24 May 2018 20:30:32 +0000</pubDate><guid>http://www.guozet.me/post/Write-your-first-Analyzer-en/</guid><description>&lt;h2 id="introduce">Introduce&lt;/h2>
&lt;p>The best way to understand the structure of the sources code is to write some modules by yourself. Let&amp;rsquo;s us to write an Analyzer in the Bro by Binpac. We choose
&lt;a href="https://tools.ietf.org/html/rfc2453" target="_blank" rel="noopener">RIP v2&lt;/a> to write the first protocol.&lt;/p>
&lt;h2 id="how-to-use-binpac-quick-start-to-create-the-relative-file-to-develop-an-analyzer">How to Use Binpac quick start to create the relative file to develop an analyzer?&lt;/h2>
&lt;h4 id="download-binpac-quick-start">Download Binpac Quick Start&lt;/h4>
&lt;p>&lt;code>git clone https://github.com/grigorescu/binpac_quickstart.git&lt;/code>
When you finish download, you can enter the &lt;code>binpac_quickstart&lt;/code> directory, then you will find there are some files in this directory as blow.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ cd binpac_quickstart/
Guoze@node-0:~/00_Workbench/binpac_quickstart$ ls -al
total 32
drwxr-xr-x 4 Guoze senfv-PG0 4096 May 22 19:30 .
drwxr-xr-x 11 Guoze senfv-PG0 4096 May 23 12:15 ..
drwxr-xr-x 8 Guoze senfv-PG0 4096 May 22 19:30 .git
-rw-r--r-- 1 Guoze senfv-PG0 21 May 22 19:30 __init__.py
-rw-r--r-- 1 Guoze senfv-PG0 128 May 22 19:30 README.md
-rwxr-xr-x 1 Guoze senfv-PG0 7151 May 22 19:30 start.py
drwxr-xr-x 2 Guoze senfv-PG0 4096 May 22 19:30 templates
&lt;/code>&lt;/pre>
&lt;h4 id="user-startpyto-create-the-directory-structure-in-bro">User &lt;code>start.py&lt;/code>to create the directory structure in Bro&lt;/h4>
&lt;p>start.py is the script which who can use to build a directory structure to develp the RIP analyzer. We can use this script as following.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/binpac_quickstart$ ./start.py
Usage:
start.py NAME DESCRIPTION PATH_TO_BRO_SRC (--tcp|--udp) [--buffered] [--plugin]
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>Example: &lt;code>./start.py RIP &amp;quot;Routing Internet Protocl&amp;quot; ../bro --udp&lt;/code>
Procotol nameï¼RIPï¼
Procoto descriptionï¼Routing Internet Protocl
The absolute path of the Bro source codeï¼../bro
The type of Network Portocol which the RIP useï¼&amp;ndash;udp&lt;/p>
&lt;/blockquote>
&lt;p>Use this script to built RIP work directory in the Bro source code file. If you don&amp;rsquo;t know RIP protocol before, please read the
&lt;a href="https://tools.ietf.org/html/rfc2453" target="_blank" rel="noopener">RIP protocol documents&lt;/a>.&lt;/p>
&lt;p>In the terminal, we just need to input the command as follows to create our work directory.
&lt;code>./start.py RIP &amp;quot;Routing Internet Protocl&amp;quot; ../bro --udp&lt;/code>&lt;/p>
&lt;p>After complete, It will create some files in the &lt;code>bro/scripts/base/protocols/rip/&lt;/code> directory and &lt;code>bro/src/analyzer/protocol/rip/&lt;/code> directory&lt;/p>
&lt;ol>
&lt;li>&lt;code>bro/scripts/base/protocols/rip/&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/scripts/base/protocols/rip$ ls -l
total 12
-rw-r--r-- 1 Guoze senfv-PG0 245 May 23 12:49 dpd.sig
-rw-r--r-- 1 Guoze senfv-PG0 66 May 23 12:49 __load__.bro
-rw-r--r-- 1 Guoze senfv-PG0 1327 May 23 12:49 main.bro
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>__load__.bro: This allows all the contents of the directory to be loaded via @load base/protocols/sip.
dpd.sig: This file contains a signature that can be used to attach the analyzer to connections if their content matches.
main.bro: Contains the base script-layer functionality for processing events emitted from the analyzer.&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>&lt;code>src/analyzer/protocol/sip/&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/src/analyzer/protocol/rip$ ls -l
total 32
-rw-r--r-- 1 Guoze senfv-PG0 301 May 23 12:50 CMakeLists.txt
-rw-r--r-- 1 Guoze senfv-PG0 472 May 23 12:50 events.bif
-rw-r--r-- 1 Guoze senfv-PG0 480 May 23 12:50 Plugin.cc
-rw-r--r-- 1 Guoze senfv-PG0 738 May 23 15:27 rip-analyzer.pac
-rw-r--r-- 1 Guoze senfv-PG0 721 May 23 12:50 RIP.cc
-rw-r--r-- 1 Guoze senfv-PG0 715 May 23 12:50 RIP.h
-rw-r--r-- 1 Guoze senfv-PG0 1005 May 23 12:50 rip.pac
-rw-r--r-- 1 Guoze senfv-PG0 939 May 23 15:03 rip-protocol.pac
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>CMakeLists.txt: Informs the CMake build system how to compile the analyzer.
Plugin.cc: Analyzers in Bro are a type of plugin. This file does whatâs necessary to register the new analyzer plugin with Bro.
RIP.h: Defines the API for the new analyzer which derives from one of Broâs already-existing analyzer classes.
RIP.cc: Implementation of the analyzer. Itâs mostly just responsible for handing off data to the protocol parser thatâs been generated by BinPAC.
events.bif: Defines events that the analyzer will generate.
rip.pac: The main entry point for the BinPAC definition of the protocol that you want to parse.
rip-protocol.pac: Where the message format is defined.&lt;br>
rip-analyzer.pac: Defines a connection, flow, and other processing functions for the analyzer.&lt;/p>
&lt;/blockquote>
&lt;p>If you just want to use Binpac to compile your c++ file, you just need to write these files:&lt;/p>
&lt;ul>
&lt;li>events.bif&lt;/li>
&lt;li>rip.pac&lt;/li>
&lt;li>rip-protocol.pac&lt;/li>
&lt;li>rip-analyzer.pac&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">Implementation&lt;/h2>
&lt;h3 id="implement-the-rip-protocolpac-file">Implement the rip-protocol.pac file&lt;/h3>
&lt;p>This file just defines each part in the RIP protocol. In the code, you will find the Binpac language use keywords &lt;code>type&lt;/code> to express a data structure in the RIP protocol. The &lt;code>RIP_PDU&lt;/code>funtion which is the lastest type in this file defines the data structure which user want to transfer when the RIP event happens.&lt;/p>
&lt;p>The RIP packet format is:&lt;/p>
&lt;pre>&lt;code> 0 1 2 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| command (1) | version (1) | must be zero (2) |
+---------------+---------------+-------------------------------+
| |
~ RIP Entry (20) ~
| |
+---------------+---------------+---------------+---------------+
&lt;/code>&lt;/pre>
&lt;p>There may be between 1 and 25 (inclusive) RIP entries. A RIP-1 entry
has the following format:&lt;/p>
&lt;pre>&lt;code> 0 1 2 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| address family identifier (2) | must be zero (2) |
+-------------------------------+-------------------------------+
| IPv4 address (4) |
+---------------------------------------------------------------+
| must be zero (4) |
+---------------------------------------------------------------+
| must be zero (4) |
+---------------------------------------------------------------+
| metric (4) |
+---------------------------------------------------------------+
&lt;/code>&lt;/pre>
&lt;p>Use this file to design the protocol structures of RIP in our case. Just take the structures from the protocol and write the code in this file to parse it.&lt;/p>
&lt;pre>&lt;code> Protocol Extensions
RIP-2 is:
0 1 2 3 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Address Family Identifier (2) | Route Tag (2) |
+-------------------------------+-------------------------------+
| IP Address (4) |
+---------------------------------------------------------------+
| Subnet Mask (4) |
+---------------------------------------------------------------+
| Next Hop (4) |
+---------------------------------------------------------------+
| Metric (4) |
+---------------------------------------------------------------+
&lt;/code>&lt;/pre>
&lt;p>The Address Family Identifier, IP Address, and Metric all have the meanings defined in
&lt;a href="https://tools.ietf.org/html/rfc2453#section-3.4" target="_blank" rel="noopener">section 3.4&lt;/a>. The Version field will specify&lt;/p>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
1
2 # ## TODO: Add your protocol structures in here.
3 # ## some examples:
4
5 # Types are your basic building blocks.
6 # There are some builtins, or you can define your own.
7 # Here's a definition for a regular expression:
8 # type RIP_WHITESPACE = RE/[ \t]*/;
9
10 # A record is a collection of types.
11 # Here's one with the built-in types
12
13 enum Rip_Command {
14 RIP_REQUEST = 1,
15 RIP_RESPONSE = 2,
16 }
17
18 enum Rip_Version {
19 RIP_V1 = 1,
20 RIP_V2 = 2,
21 }
22
23 type Rip_Message = record { //Base Message
24 command : uint8;
25 version : uint8;
26 pad : padding[2]; //must be zero
27 entry : Rip_Entry[] &amp;amp;until($input.length()) == 0;
28 };
29
30 type Rip_Entry = record {
31 af : uint16;
32 rt : uint16;
33 ip : uint32;
34 mask : uint32;
35 gateway : uint32;
36 metric : uint32;
37 };
38
39 type RIP_PDU(is_orig: bool) = record {
40 command : uint8;
41 version : uint8;
42 pad : padding[2];
43 } &amp;amp;byteorder=bigendian;
&lt;/code>&lt;/pre>
&lt;p>RIP_PDU structure: pass to the user land, just focus which you want to pass.&lt;/p>
&lt;h3 id="implement-the-rip_analyzerpac-file">Implement the rip_analyzer.pac file&lt;/h3>
&lt;p>This file mainly finishes the processing and analyzing of the data which was passed by the &lt;code>RIP_PDU&lt;/code> function to this file. If there is a RIP event happens, then it enters this processing flow.&lt;/p>
&lt;p>The &lt;code>BifEvent::generate_rip_request&lt;/code> function illustrates how to generate an request event. We use this event to pass the data structure which is important in the next process (the data structure created in rip_protocol.pac). The main thing we need to define is what we want to pass. Such as: &lt;code>msg.command&lt;/code>, &lt;code>msg.version&lt;/code>&lt;/p>
&lt;p>%code{ &amp;hellip; %} : Copy C++ code to the generated source file&lt;/p>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
1
2 refine flow RIP_Flow += {
3 function proc_rip_message(msg: RIP_PDU): bool
4 %{
5 // Check for RIP commands
6 if ( ${msg.command} == RIP_REQUEST) {
7 BifEvent::generate_rip_request(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
8 ${msg.command}, //Pass more thing
9 ${msg.version});
10 return true;
11 }
12 if ( ${msg.command} == RIP_RESPONSE) {
13 BifEvent::generate_rip_response(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
14 ${msg.command},
15 ${msg.version});
16 return true;
17 }
18 %}
19 };
20
21 refine typeattr RIP_PDU += &amp;amp;let {
22 proc: bool = $context.flow.proc_rip_message(this);
23 };
~
&lt;/code>&lt;/pre>
&lt;p>&lt;code>function proc_rip_message(msg: RIP_PDU): bool&lt;/code> just like to say please use that RIP_PDU data structure that was defined in the earlier file.&lt;/p>
&lt;h3 id="implement-the-eventsbif-file">Implement the events.bif file&lt;/h3>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
1
2 # In this file, you'll define the events that your analyzer will
3 # generate. A sample event is included.
4
5 # ## TODO: Edit the sample event, and add more events.
6
7 ## Generated for RIP connections
8 ##
9 ## See `Google &amp;lt;http://lmgtfy.com/?q=RIP&amp;gt;`__ for more information about RIP
10 ##
11 ## c: The connection
12 ##
13 event rip_request%(c: connection, command: count, version: count%);
14 event rip_response%(c: connection, command: count, version: count%);
&lt;/code>&lt;/pre>
&lt;p>RIP just have two types of command:&lt;/p>
&lt;ul>
&lt;li>rip_request&lt;/li>
&lt;li>rip_response&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;h3 id="configure-bros-working-environment">Configure Bro&amp;rsquo;s Working Environment&lt;/h3>
&lt;p>Firstly, we need to configure the bro&amp;rsquo;s path to execute it.
The executable path of the Bro is &lt;code>bro/build/src/bro&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ ./build/src/bro -h
bro version 2.5-598
usage: ./build/src/bro [options] [file ...]
&amp;lt;file&amp;gt; | policy file, or read stdin
-a|--parse-only | exit immediately after parsing scripts
-b|--bare-mode | don't load scripts from the base/ directory
-d|--debug-policy | activate policy file debugging
-e|--exec &amp;lt;bro code&amp;gt; | augment loaded policies by given code
-f|--filter &amp;lt;filter&amp;gt; | tcpdump filter
&lt;/code>&lt;/pre>
&lt;p>Bro has provided an executable script for you. As a result, you can easily configure environment variables. We just need to execute the configuration script. Use the shell script for configuring environment variables is as follows:&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/build$ cat bro-path-dev.sh
export BROPATH=`/users/Guoze/00_Workbench/bro/build/bro-path-dev`
export BRO_PLUGIN_PATH=&amp;quot;/users/Guoze/00_Workbench/bro/build/src&amp;quot;:
export PATH=&amp;quot;/users/Guoze/00_Workbench/bro/build/src&amp;quot;:$PATH
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ source ./build/bro-path-dev.sh
&lt;/code>&lt;/pre>
&lt;p>If you want to check the execution status of the script and determine whether it has completed the configuration, you can enter: &lt;code>bro -h&lt;/code>in the terminal. If the execution result is as same as the result of &lt;code>./build/src/bro -h&lt;/code>, then it means that the configuration has been configured successfully.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ bro -h
bro version 2.5-598
usage: bro [options] [file ...]
&amp;lt;file&amp;gt; | policy file, or read stdin
-a|--parse-only | exit immediately after parsing scripts
-b|--bare-mode | don't load scripts from the base/ directory
-d|--debug-policy | activate policy file debugging
-e|--exec &amp;lt;bro code&amp;gt; | augment loaded policies by given code
-f|--filter &amp;lt;filter&amp;gt; | tcpdump filter
-g|--dump-config | dump current config into .state dir
-h|--help|-? | command line help
&lt;/code>&lt;/pre>
&lt;h3 id="test-rip-parser">Test RIP parser&lt;/h3>
&lt;h4 id="download-rip-network-data">Download RIP Network data&lt;/h4>
&lt;p>We can directly download a RIPv2 packet which can be used for testing on Internet.
&lt;code>$ wget http://packetlife.net/captures/RIPv2.cap&lt;/code>&lt;/p>
&lt;p>After download, use the command &amp;lsquo;tcpdump&amp;rsquo; to determine whether the data packet contains RIP data.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ tcpdump -nr RIPv2.cap
reading from file RIPv2.cap, link-type EN10MB (Ethernet)
23:06:26.942558 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:30.158769 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:52.663855 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:58.416478 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:19.709681 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:24.974047 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:45.389720 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:53.891896 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:14.625084 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:21.933550 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:41.410659 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:47.731064 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
&lt;/code>&lt;/pre>
&lt;h4 id="add-some-print-information">Add some print information&lt;/h4>
&lt;pre>&lt;code class="language-cpp"> 12 refine flow RIP_Flow += {
11 function proc_rip_message(msg: RIP_PDU): bool
10 %{
9 // Check for RIP commands
8 if ( ${msg.command} == RIP_REQUEST) {
7 printf(&amp;quot;In rip_request\n&amp;quot;);
6 BifEvent::generate_rip_request(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
5 ${msg.command},
4 ${msg.version});
3 return true;
2 }
1 if ( ${msg.command} == RIP_RESPONSE) {
15 printf(&amp;quot;In rip_response\n&amp;quot;);
1 BifEvent::generate_rip_response(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
2 ${msg.command},
3 ${msg.version});
4 return true;
5 }
6 %}
&lt;/code>&lt;/pre>
&lt;p>After change, &lt;code>make&lt;/code> the code again.&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ sudo make
make -C build all
make[1]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[2]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[3]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[3]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
........
........
[100%] Built target rst
make[2]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
make[1]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
&lt;/code>&lt;/pre>
&lt;h4 id="use-network-capture-data-for-testing">Use Network Capture Data for Testing&lt;/h4>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ bro -r RIPv2.cap
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
&lt;/code>&lt;/pre></description></item><item><title>Ubuntu 16.04å®è£broåBinpac</title><link>http://www.guozet.me/post/Install-bro-Binpac/</link><pubDate>Thu, 24 May 2018 13:30:32 +0000</pubDate><guid>http://www.guozet.me/post/Install-bro-Binpac/</guid><description>&lt;h1 id="åè¨">åè¨&lt;/h1>
&lt;p>ï»¿Bro is a powerful network analysis framework that is much different from the typical IDS you may know.&lt;/p>
&lt;p>BinPAC is a high level language for describing protocol parsers and generates C++ code. It is currently maintained and distributed with the Bro Network Security Monitor distribution, however, the generated parsers may be used with other programs besides Bro.&lt;/p>
&lt;h1 id="è½¯ä»¶å®è£">è½¯ä»¶å®è£&lt;/h1>
&lt;h2 id="å®è£bro">å®è£Bro&lt;/h2>
&lt;h3 id="åæä¾èµåå®è£">åæä¾èµåå®è£&lt;/h3>
&lt;p>Bro requires the following libraries and tools to be installed before you begin:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Libpcap (
&lt;a href="http://www.tcpdump.org/" target="_blank" rel="noopener">http://www.tcpdump.org&lt;/a>)&lt;/li>
&lt;li>OpenSSL libraries (
&lt;a href="http://www.openssl.org/" target="_blank" rel="noopener">http://www.openssl.org&lt;/a>)&lt;/li>
&lt;li>BIND8 library&lt;/li>
&lt;li>Libz&lt;/li>
&lt;li>Bash (for BroControl)&lt;/li>
&lt;li>Python 2.6 or greater (for BroControl)&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>To build Bro from source, the following additional dependencies are required:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>CMake 2.8 or greater (
&lt;a href="http://www.cmake.org/" target="_blank" rel="noopener">http://www.cmake.org&lt;/a>)&lt;/li>
&lt;li>Make&lt;/li>
&lt;li>C/C++ compiler with C++11 support (GCC 4.8+ or Clang 3.3+)&lt;/li>
&lt;li>SWIG (
&lt;a href="http://www.swig.org/" target="_blank" rel="noopener">http://www.swig.org&lt;/a>)&lt;/li>
&lt;li>Bison (GNU Parser Generator)&lt;/li>
&lt;li>Flex (Fast Lexical Analyzer)&lt;/li>
&lt;li>Libpcap headers (
&lt;a href="http://www.tcpdump.org/" target="_blank" rel="noopener">http://www.tcpdump.org&lt;/a>)&lt;/li>
&lt;li>OpenSSL headers (
&lt;a href="http://www.openssl.org/" target="_blank" rel="noopener">http://www.openssl.org&lt;/a>)&lt;/li>
&lt;li>zlib headers&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>To install the required dependencies, you can use:&lt;/p>
&lt;ul>
&lt;li>DEB/Debian-based Linux:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev
&lt;/code>&lt;/pre>
&lt;h3 id="installing-from-source">Installing from Source&lt;/h3>
&lt;p>Bro releases are bundled into source packages for convenience and are available on the
&lt;a href="https://www.bro.org/download/index.html" target="_blank" rel="noopener">bro downloads page&lt;/a>.&lt;/p>
&lt;p>Alternatively, the latest Bro development version can be obtained through git repositories hosted at &lt;code>git.bro.org&lt;/code>. See their
&lt;a href="https://www.bro.org/development/howtos/process.html" target="_blank" rel="noopener">git development documentation&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-sh">git clone --recursive git://git.bro.org/bro
cd bro
sudo su
./configure
make
make install
&lt;/code>&lt;/pre>
&lt;h3 id="éç½®ç¯å¢åé">éç½®ç¯å¢åé&lt;/h3>
&lt;p>&lt;code>export PATH=/usr/local/bro/bin:$PATH&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>æ³¨æï¼ç±äºExportçæ¹å¼ï¼åªæ¯å¨æ¬æ¬¡ç»å½shçè¿ç¨ä¸­æææçï¼æä»¥åç»­éè¦éæ°éç½®&lt;/p>
&lt;/blockquote>
&lt;h2 id="å®è£binpac">å®è£Binpac&lt;/h2>
&lt;h2 id="ä¾èµåæä»¶httpswwwbroorgsphinx-gitcomponentsbinpacreadmehtmlid7">
&lt;a href="https://www.bro.org/sphinx-git/components/binpac/README.html#id7" target="_blank" rel="noopener">ä¾èµåæä»¶&lt;/a>&lt;/h2>
&lt;p>BinPAC relies on the following libraries and tools, which need to be installed before you begin:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>Flex (Fast Lexical Analyzer)
Flex is already installed on most systems, so with luck you can skip having to install it yourself.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bison (GNU Parser Generator)&lt;/p>
&lt;p>Bison is also already installed on many system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CMake 2.6.3 or greater&lt;/p>
&lt;p>CMake is a cross-platform, open-source build system, typically not installed by default. See
&lt;a href="http://www.cmake.org/" target="_blank" rel="noopener">http://www.cmake.org&lt;/a> for more information regarding CMake and the installation steps below for how to use it to build this distribution. CMake generates native Makefiles that depend on GNU Make by default&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="installing-from-source-1">Installing from Source&lt;/h3>
&lt;p>To build and install into &lt;code>/usr/local&lt;/code>:&lt;/p>
&lt;pre>&lt;code>git clone --recursive git@github.com:bro/binpac.git
cd binpac
./configure
cd build
make
sudo make install
&lt;/code>&lt;/pre>
&lt;p>This will perform an out-of-source build into the build directory using the default build options and then install the binpac binary into &lt;code>/usr/local/bin&lt;/code>.&lt;/p>
&lt;p>You can specify a different installation directory with:&lt;/p>
&lt;p>./configure &amp;ndash;prefix=&lt;dir>&lt;/p>
&lt;p>Run &lt;code>./configure --help&lt;/code> for more options.&lt;/p>
&lt;h2 id="ä¸è½½-binpac-sample-analyzer">ä¸è½½ BinPAC Sample Analyzer&lt;/h2>
&lt;p>è¿ä¸ªæ¯ä¸ä¸ªpythonèæ¬ï¼è½å¤æç§broçè§åçæåºBinpacéè¦ä¹¦åçæä»¶ï¼çæåºæ¥ä¹åï¼æä»¬åªéè¦å¡«åè¿äºæä»¶å°±å¯ä»¥äºã&lt;/p>
&lt;h2 id="installing-from-source-2">Installing from Source&lt;/h2>
&lt;p>ä»Githubä¸é¢æ·è´ä¾å­çæä»¶ä¸æ¥
&lt;code>git clone https://github.com/grigorescu/binpac_quickstart&lt;/code>
Inside the binpac_quickstart directory, simply run:&lt;/p>
&lt;p>&lt;code>python start.py Sample &amp;quot;Sample Protocol&amp;quot; ../bro --tcp --buffered&lt;/code>&lt;/p>
&lt;p>This will generate all the necessary files for this sample analyzer. The ../bro argument here just points to the Bro source tree. Make sure to change it if yours lives in a different location. See the start.py âhelpoptions for more explanation of the options.&lt;/p>
&lt;p>Bro should be able to compile the generated template code right away, but files may have some âTODOâ comments in them to mark places that typically need to be changed depending on the specifics of the protocol analyzer you want to make.&lt;/p>
&lt;h1 id="éå°çé®é¢">éå°çé®é¢&lt;/h1>
&lt;h2 id="ä¹¦åanalyzeræ¶åéå°çé®é¢">ä¹¦åAnalyzeræ¶åéå°çé®é¢&lt;/h2>
&lt;h3 id="broå®è£è¿ç¨ä¸­éå°çéè¯¯">Broå®è£è¿ç¨ä¸­éå°çéè¯¯&lt;/h3>
&lt;h4 id="éè¯¯1-configureéè¯¯">éè¯¯1 ./configureéè¯¯&lt;/h4>
&lt;pre>&lt;code>bro# ./configure --with-pcap=/opt/pfring
Build Directory : build
Source Directory: /root/install/bro
CMake Error at CMakeLists.txt:7 (include):
include could not find load file:
cmake/CommonCMakeConfig.cmake
CMake Error at CMakeLists.txt:52 (include):
include could not find load file:
FindRequiredPackage
â Found sed: /bin/sed
CMake Error at CMakeLists.txt:64 (FindRequiredPackage):
Unknown CMake command &amp;quot;FindRequiredPackage&amp;quot;.
â Configuring incomplete, errors occurred!
See also &amp;quot;/root/install/bro/build/CMakeFiles/CMakeOutput.log&amp;quot;.
&lt;/code>&lt;/pre>
&lt;p>è§£å³æ¹æ¡ï¼
åéçæ¶åéè¦æ·»å &amp;ndash;recursiveåæ°ï¼ä¿è¯èªå·±ä¸è½½çå­æ¨¡å
&lt;code>git clone --recursive git://git.bro.org/bro&lt;/code>&lt;/p>
&lt;h3 id="ç¼è¯èªå·±ä¹¦åçanalyzeræ¶åçé®é¢">ç¼è¯èªå·±ä¹¦åçAnalyzeræ¶åçé®é¢&lt;/h3>
&lt;h4 id="éè¯¯1">éè¯¯1&lt;/h4>
&lt;pre>&lt;code> make[3]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[3]: *** No rule to make target '../src/binpac', needed by 'src/binpac-lib_pac.h'. Stop.
make[3]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
CMakeFiles/Makefile2:946: recipe for target 'src/CMakeFiles/pac-binpac-lib.pac.dir/all' failed
make[2]: *** [src/CMakeFiles/pac-binpac-lib.pac.dir/all] Error 2
make[2]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
Makefile:138: recipe for target 'all' failed
make[1]: *** [all] Error 2
make[1]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
Makefile:15: recipe for target 'all' failed
make: *** [all] Error 2
&lt;/code>&lt;/pre>
&lt;p>è§£å³æ¹æ¡ï¼
è¿ä¸ªéè¯¯å¾å¤§å¯è½æ§æ¯ä½ ä½¿ç¨äºå¨è¯¥æä»¶ç®å½ä¸æ²¡ææéï¼å å¥sudo make&lt;/p>
&lt;h4 id="éè¯¯2">éè¯¯2&lt;/h4>
&lt;pre>&lt;code>[ 1%] Completed 'project_caf'
make[3]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
[ 2%] Built target project_caf
make[2]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
Makefile:138: recipe for target 'all' failed
make[1]: *** [all] Error 2
make[1]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
Makefile:15: recipe for target 'all' failed
make: *** [all] Error 2
&lt;/code>&lt;/pre>
&lt;p>è§£å³æ¹æ¡ï¼
è¿ä¸ªéè¯¯å¾å¤§å¯è½æ§æ¯ä½ ä½¿ç¨äº&lt;code>make -j 4&lt;/code>å¤æ ¸ç¼è¯çæ¹å¼å¯¼è´çï¼åæ¶å¤æ ¸ç¼è¯ï¼ä»ä»ä½¿ç¨make&lt;/p></description></item><item><title>å¨Broä¸­å®æç¬¬ä¸ä¸ªåè®®åæå¨âRIPåè®®</title><link>http://www.guozet.me/post/Write-first-Analyzer-rip/</link><pubDate>Wed, 23 May 2018 20:30:32 +0000</pubDate><guid>http://www.guozet.me/post/Write-first-Analyzer-rip/</guid><description>&lt;h1 id="åè¨">åè¨&lt;/h1>
&lt;p>çæä»£ç ç»ææå¥½çæ¹å¼ï¼å°±æ¯å°è¯èªå·±å»åä¸ä¸ªæ¨¡åå å¥å°æ´ä¸ªç³»ç»ä¸­ï¼å¨è°è¯ä»£ç çè¿ç¨ä¸­ï¼çæä»£ç ã&lt;/p>
&lt;h1 id="å®ç°æµç¨">å®ç°æµç¨&lt;/h1>
&lt;h2 id="ä½¿ç¨binpac-quick-startèæ¬çæèªå·±çanalyzerç®å½ç»æ">ä½¿ç¨Binpac quick startèæ¬çæèªå·±çAnalyzerç®å½ç»æ&lt;/h2>
&lt;h4 id="ä¸è½½binpac-quick-startèæ¬">ä¸è½½Binpac Quick Startèæ¬&lt;/h4>
&lt;p>&lt;code>git clone https://github.com/grigorescu/binpac_quickstart.git&lt;/code>
ä¸è½½å®æä¹åï¼è¿å¥è¯¥ç®å½ï¼ç®å½ç»æå¦ä¸å¾æç¤º:&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ cd binpac_quickstart/
Guoze@node-0:~/00_Workbench/binpac_quickstart$ ls -al
total 32
drwxr-xr-x 4 Guoze senfv-PG0 4096 May 22 19:30 .
drwxr-xr-x 11 Guoze senfv-PG0 4096 May 23 12:15 ..
drwxr-xr-x 8 Guoze senfv-PG0 4096 May 22 19:30 .git
-rw-r--r-- 1 Guoze senfv-PG0 21 May 22 19:30 __init__.py
-rw-r--r-- 1 Guoze senfv-PG0 128 May 22 19:30 README.md
-rwxr-xr-x 1 Guoze senfv-PG0 7151 May 22 19:30 start.py
drwxr-xr-x 2 Guoze senfv-PG0 4096 May 22 19:30 templates
&lt;/code>&lt;/pre>
&lt;h4 id="ä½¿ç¨èæ¬çäº§åæå¨ç®å½ç»æ">ä½¿ç¨èæ¬çäº§åæå¨ç®å½ç»æ&lt;/h4>
&lt;p>start.pyçpythonå°±æ¯æä»¬å¯ä»¥ç¨æ¥çæbroä¸­Analyzerçpythonèæ¬ï¼ä½¿ç¨æ¹å¼ï¼&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/binpac_quickstart$ ./start.py
Usage:
start.py NAME DESCRIPTION PATH_TO_BRO_SRC (--tcp|--udp) [--buffered] [--plugin]
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>Example: &lt;code>./start.py RIP &amp;quot;Routing Internet Protocl&amp;quot; ../bro --udp&lt;/code>
åè®®åç§°ï¼RIPï¼
åè®®ä»ç»ï¼Routing Internet Protocl
Broæºä»£ç çè·¯å¾ï¼../bro
åºå±çç½ç»åè®®ï¼&amp;ndash;udp&lt;/p>
&lt;/blockquote>
&lt;p>æä»¬ä¹¦åçç¬¬ä¸ä¸ªèæ¬å°±æ¯å®ç°RIPåè®®çè§£æï¼RIPåè®®çè¯¦ç»åå®¹è¯·åèã
å¨ç»ç«¯è¾å¥ï¼&lt;code>./start.py RIP &amp;quot;Routing Internet Protocl&amp;quot; ../bro --udp&lt;/code>
æ§è¡ç»æä¹ååå«å¨broæºä»£ç ä¸ä¸¤ä¸ªä½ç½®çäº§æä»¶ï¼&lt;/p>
&lt;ol>
&lt;li>&lt;code>bro/scripts/base/protocols/rip/&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/scripts/base/protocols/rip$ ls -l
total 12
-rw-r--r-- 1 Guoze senfv-PG0 245 May 23 12:49 dpd.sig
-rw-r--r-- 1 Guoze senfv-PG0 66 May 23 12:49 __load__.bro
-rw-r--r-- 1 Guoze senfv-PG0 1327 May 23 12:49 main.bro
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>&lt;strong>load&lt;/strong>.bro: This allows all the contents of the directory to be loaded via @load base/protocols/sip.
dpd.sig: This file contains a signature that can be used to attach the analyzer to connections if their content matches.
main.bro: Contains the base script-layer functionality for processing events emitted from the analyzer.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>&lt;code>src/analyzer/protocol/sip/&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/src/analyzer/protocol/rip$ ls -l
total 32
-rw-r--r-- 1 Guoze senfv-PG0 301 May 23 12:50 CMakeLists.txt
-rw-r--r-- 1 Guoze senfv-PG0 472 May 23 12:50 events.bif
-rw-r--r-- 1 Guoze senfv-PG0 480 May 23 12:50 Plugin.cc
-rw-r--r-- 1 Guoze senfv-PG0 738 May 23 15:27 rip-analyzer.pac
-rw-r--r-- 1 Guoze senfv-PG0 721 May 23 12:50 RIP.cc
-rw-r--r-- 1 Guoze senfv-PG0 715 May 23 12:50 RIP.h
-rw-r--r-- 1 Guoze senfv-PG0 1005 May 23 12:50 rip.pac
-rw-r--r-- 1 Guoze senfv-PG0 939 May 23 15:03 rip-protocol.pac
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>CMakeLists.txt: Informs the CMake build system how to compile the analyzer.
Plugin.cc: Analyzers in Bro are a type of plugin. This file does whatâs necessary to register the new analyzer plugin with Bro.
RIP.h: Defines the API for the new analyzer which derives from one of Broâs already-existing analyzer classes.
RIP.cc: mplementation of the analyzer. Itâs mostly just responsible for handing off data to the protocol parser thatâs been generated by BinPAC.
events.bif: Defines events that the analyzer will generate.
rip.pac: The main entry point for the BinPAC definition of the protocol that you want to parse.
rip-protocol.pac: Where the message format is defined.&lt;br>
rip-analyzer.pac: Defines a connection, flow, and other processing functions for the analyzer.&lt;/p>
&lt;/blockquote>
&lt;p>å¨è¿äºæä»¶å½ä¸­ï¼æä»¬ä¸»è¦éè¦å®æï¼&lt;/p>
&lt;ul>
&lt;li>events.bif&lt;/li>
&lt;li>rip.pac&lt;/li>
&lt;li>rip-protocol.pac&lt;/li>
&lt;li>rip-analyzer.pac&lt;/li>
&lt;/ul>
&lt;h2 id="ä»£ç å®ç°">ä»£ç å®ç°&lt;/h2>
&lt;h3 id="rip-protocolpacæä»¶">rip-protocol.pacæä»¶&lt;/h3>
&lt;p>è¿ä¸ªæä»¶å®ç°çæ¯å¯¹RIPåè®®çç»æé¨åè¿è¡å®ä¹ï¼ä»¥typeçæ¹å¼å®ä¹åè®®æ°æ®ä¼ è¾çåä¸ªé¨åãå¶ä¸­&lt;code>RIP_PDU&lt;/code>å½æ°æ¯å°éè¦å¤ççé¨åä¼ éå°åæä»ªå»ã&lt;/p>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
2 # ## TODO: Add your protocol structures in here.
3 # ## some examples:
4
5 # Types are your basic building blocks.
6 # There are some builtins, or you can define your own.
7 # Here's a definition for a regular expression:
8 # type RIP_WHITESPACE = RE/[ \t]*/;
9
10 # A record is a collection of types.
11 # Here's one with the built-in types
12
13 enum Rip_Command {
14 RIP_REQUEST = 1,
15 RIP_RESPONSE = 2,
16 }
17
18 enum Rip_Version {
19 RIP_V1 = 1,
20 RIP_V2 = 2,
21 }
22
23 type Rip_Message = record {
24 command : uint8;
25 version : uint8;
26 pad : padding[2];
27 entry : Rip_Entry[] &amp;amp;until($input.length()) == 0;
28 };
29
30 type Rip_Entry = record {
31 af : uint16;
32 rt : uint16;
33 ip : uint32;
34 mask : uint32;
35 gateway : uint32;
36 metric : uint32;
37 };
38
39 type RIP_PDU(is_orig: bool) = record {
40 command : uint8;
41 version : uint8;
42 pad : padding[2];
43 } &amp;amp;byteorder=bigendian;
&lt;/code>&lt;/pre>
&lt;h3 id="rip_analyzerpacæä»¶å®ç°">rip_analyzer.pacæä»¶å®ç°&lt;/h3>
&lt;p>è¯¥æä»¶ä¸»è¦å®æå¯¹å½ä»¤ååºå¯¹&lt;code>RIP_PDU&lt;/code>å½æ°ä¼ éè¿æ¥çæ°æ®è¿è¡å¤çè§£æ, å¦ææRIPæ°æ®ååºç°é£ä¹å°±è¿å¥è¿ä¸ªå¤çæµç¨ã&lt;/p>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
1
2 refine flow RIP_Flow += {
3 function proc_rip_message(msg: RIP_PDU): bool
4 %{
5 // Check for RIP commands
6 if ( ${msg.command} == RIP_REQUEST) {
7 BifEvent::generate_rip_request(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
8 ${msg.command},
9 ${msg.version});
10 return true;
11 }
12 if ( ${msg.command} == RIP_RESPONSE) {
13 BifEvent::generate_rip_response(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
14 ${msg.command},
15 ${msg.version});
16 return true;
17 }
18 %}
19 };
20
21 refine typeattr RIP_PDU += &amp;amp;let {
22 proc: bool = $context.flow.proc_rip_message(this);
23 };
~
&lt;/code>&lt;/pre>
&lt;h3 id="eventsbifæä»¶å®ç°">events.bifæä»¶å®ç°&lt;/h3>
&lt;pre>&lt;code class="language-cpp">1 # Generated by binpac_quickstart
1
2 # In this file, you'll define the events that your analyzer will
3 # generate. A sample event is included.
4
5 # ## TODO: Edit the sample event, and add more events.
6
7 ## Generated for RIP connections
8 ##
9 ## See `Google &amp;lt;http://lmgtfy.com/?q=RIP&amp;gt;`__ for more information about RIP
10 ##
11 ## c: The connection
12 ##
13 event rip_request%(c: connection, command: count, version: count%);
14 Event rip_response%(c: connection, command: count, version: count%);
&lt;/code>&lt;/pre>
&lt;h2 id="æµè¯">æµè¯&lt;/h2>
&lt;h3 id="éç½®broçå·¥ä½ç¯å¢">éç½®broçå·¥ä½ç¯å¢&lt;/h3>
&lt;p>é¦åéè¦éç½®å¥½broçå¯æ§è¡æä»¶çè·¯å¾é®é¢ï¼
Broå¯æ§è¡æä»¶çè·¯å¾å¨ï¼&lt;code>bro/build/src/bro&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ ./build/src/bro -h
bro version 2.5-598
usage: ./build/src/bro [options] [file ...]
&amp;lt;file&amp;gt; | policy file, or read stdin
-a|--parse-only | exit immediately after parsing scripts
-b|--bare-mode | don't load scripts from the base/ directory
-d|--debug-policy | activate policy file debugging
-e|--exec &amp;lt;bro code&amp;gt; | augment loaded policies by given code
-f|--filter &amp;lt;filter&amp;gt; | tcpdump filter
&lt;/code>&lt;/pre>
&lt;p>Broå·²ç»æä¾äºå¯æ§è¡èæ¬ç»ä½ ï¼è®©ä½ å¯ä»¥æ¹ä¾¿çéç½®ç¯å¢åéï¼æä»¥æä»¬å¯ä»¥ç´æ¥æ§è¡éç½®èæ¬å°±å¥½äºã
éç½®ç¯å¢åéçshellèæ¬ä¸ºï¼&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/build$ cat bro-path-dev.sh
export BROPATH=`/users/Guoze/00_Workbench/bro/build/bro-path-dev`
export BRO_PLUGIN_PATH=&amp;quot;/users/Guoze/00_Workbench/bro/build/src&amp;quot;:
export PATH=&amp;quot;/users/Guoze/00_Workbench/bro/build/src&amp;quot;:$PATH
&lt;/code>&lt;/pre>
&lt;p>æ§è¡èæ¬å®æéç½®&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ source ./build/bro-path-dev.sh
&lt;/code>&lt;/pre>
&lt;p>æ£æµèæ¬æ§è¡æåµï¼å¤æ­æ¯å¦å®æéç½®ï¼å¨ç»ç«¯è¾å¥ï¼&lt;code>bro -h&lt;/code>, å¦ææ§è¡ç»æåæ§è¡&lt;code>./build/src/bro -h&lt;/code>çç»æä¸è´ï¼é£ä¹å°±è¡¨ç¤ºå·²ç»éç½®æåäºã&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ bro -h
bro version 2.5-598
usage: bro [options] [file ...]
&amp;lt;file&amp;gt; | policy file, or read stdin
-a|--parse-only | exit immediately after parsing scripts
-b|--bare-mode | don't load scripts from the base/ directory
-d|--debug-policy | activate policy file debugging
-e|--exec &amp;lt;bro code&amp;gt; | augment loaded policies by given code
-f|--filter &amp;lt;filter&amp;gt; | tcpdump filter
-g|--dump-config | dump current config into .state dir
-h|--help|-? | command line help
&lt;/code>&lt;/pre>
&lt;h3 id="æµè¯ä»£ç ">æµè¯ä»£ç &lt;/h3>
&lt;h4 id="ä¸è½½ripçç½ç»æ°æ®æå">ä¸è½½RIPçç½ç»æ°æ®æå&lt;/h4>
&lt;p>ç´æ¥ä¸è½½ä¸ä¸ªRIPv2çæ°æ®åå°±å¯ä»¥ç¨äºæµè¯äº
&lt;code>$ wget http://packetlife.net/captures/RIPv2.cap&lt;/code>
å¤æ­æ°æ®åæ¯å¦æ¯åå«çRIPæ°æ®ï¼è½å¦ç¬¦åæä»¬çè¦æ±ï¼&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ tcpdump -nr RIPv2.cap
reading from file RIPv2.cap, link-type EN10MB (Ethernet)
23:06:26.942558 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:30.158769 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:52.663855 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:06:58.416478 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:19.709681 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:24.974047 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:45.389720 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:07:53.891896 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:14.625084 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:21.933550 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:41.410659 IP 10.0.0.1.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
23:08:47.731064 IP 10.0.0.2.520 &amp;gt; 224.0.0.9.520: RIPv2, Response, length: 84
&lt;/code>&lt;/pre>
&lt;h4 id="ä¿®æ¹ä»£ç å å¥æµè¯æå°æ°æ®">ä¿®æ¹ä»£ç ï¼å å¥æµè¯æå°æ°æ®&lt;/h4>
&lt;pre>&lt;code class="language-cpp"> 12 refine flow RIP_Flow += {
11 function proc_rip_message(msg: RIP_PDU): bool
10 %{
9 // Check for RIP commands
8 if ( ${msg.command} == RIP_REQUEST) {
7 printf(&amp;quot;In rip_request\n&amp;quot;);
6 BifEvent::generate_rip_request(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
5 ${msg.command},
4 ${msg.version});
3 return true;
2 }
1 if ( ${msg.command} == RIP_RESPONSE) {
15 printf(&amp;quot;In rip_response\n&amp;quot;);
1 BifEvent::generate_rip_response(connection()-&amp;gt;bro_analyzer(), connection()-&amp;gt;bro_analyzer()-&amp;gt;Conn(),
2 ${msg.command},
3 ${msg.version});
4 return true;
5 }
6 %}
&lt;/code>&lt;/pre>
&lt;p>ä¿®æ¹ä»£ç å®æä¹åï¼éæ°ç¼è¯ä»£ç :&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro$ sudo make
make -C build all
make[1]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[2]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[3]: Entering directory '/users/Guoze/00_Workbench/bro/build'
make[3]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
........
........
[100%] Built target rst
make[2]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
make[1]: Leaving directory '/users/Guoze/00_Workbench/bro/build'
&lt;/code>&lt;/pre>
&lt;p>ç»å°¾åæä¸è¿°ç»æç±»ä¼¼çè¯ï¼è¡¨ç¤ºç¼è¯éè¿ã&lt;/p>
&lt;h4 id="ä½¿ç¨ç½ç»æåæ°æ®è¿è¡æµè¯">ä½¿ç¨ç½ç»æåæ°æ®è¿è¡æµè¯&lt;/h4>
&lt;p>ä½¿ç¨Broå¯¼å¥è¿ä¸ªæ°æ®åè¿è¡æµè¯&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench$ bro -r RIPv2.cap
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
In rip_response
&lt;/code>&lt;/pre>
&lt;h2 id="æåçè§£">æåçè§£&lt;/h2>
&lt;p>å¨åé¢çé¨åï¼å¹¶æ²¡æå»å¤ç&lt;code>scripts/base/protocols/rip/&lt;/code>ç®å½ä¸é¢çæä»¶ï¼æ¥ä¸æ¥æä»¬éè¦æ¥çè§£è¿å ä¸ªæä»¶ã&lt;/p>
&lt;pre>&lt;code class="language-bash">Guoze@node-0:~/00_Workbench/bro/scripts/base/protocols/rip$ ls -l
total 12
-rw-r--r-- 1 Guoze senfv-PG0 245 May 23 12:49 dpd.sig
-rw-r--r-- 1 Guoze senfv-PG0 66 May 23 12:49 __load__.bro
-rw-r--r-- 1 Guoze senfv-PG0 1327 May 23 12:49 main.bro
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>&lt;strong>load&lt;/strong>.bro: This allows all the contents of the directory to be loaded via @load base/protocols/sip.
dpd.sig: This file contains a signature that can be used to attach the analyzer to connections if their content matches.
main.bro: Contains the base script-layer functionality for processing events emitted from the analyzer.&lt;/p>
&lt;/blockquote>
&lt;h3 id="__load__broçè§£">&lt;strong>load&lt;/strong>.broçè§£&lt;/h3>
&lt;p>è¿ä¸ªæä»¶å è½½äºææçåå®¹å°Broä¸­å»ã&lt;/p>
&lt;h3 id="dpdsig-digital-protocol-detection-scripts">dpd.sig (digital protocol detection scripts)&lt;/h3>
&lt;p>å½ä½ æ¾åºæ¥å¹éä½ å®ä¹çç¹æ®çåè®®çæ¶åï¼ä»å°±ä¼çæåè°ç¨å¯¹åºçåæå¨å»å¤çï¼æä»¬å¯ä»¥è¿éå®ä¹å®éè¦å¤ççæ¥å£&lt;/p>
&lt;h3 id="mainbro">main.bro&lt;/h3>
&lt;p>è¿ä¸ªæä»¶åå«äºææçåºæ¬å·¥ä½åææåæå¨åå®¹ï¼Broé¦åäºå¿çåå®¹&lt;/p>
&lt;p>&amp;lt;æªå®å¾ç»­&amp;gt;&lt;/p></description></item></channel></rss>