<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EffectiveC++ | Terry Tang</title><link>http://www.guozet.me/category/EffectiveC-/</link><atom:link href="http://www.guozet.me/category/EffectiveC-/index.xml" rel="self" type="application/rss+xml"/><description>EffectiveC++</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>guozet.me © 2020</copyright><lastBuildDate>Tue, 11 Sep 2018 02:09:31 +0000</lastBuildDate><image><url>http://www.guozet.me/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url><title>EffectiveC++</title><link>http://www.guozet.me/category/EffectiveC-/</link></image><item><title>Book. Effective C++ item1-View C++ as a federatime of languages</title><link>http://www.guozet.me/post/EffectiveC++-item1/</link><pubDate>Tue, 11 Sep 2018 02:09:31 +0000</pubDate><guid>http://www.guozet.me/post/EffectiveC++-item1/</guid><description>&lt;h1 id="view-c-as-a-federation-of-languages">View C++ as a federation of Languages&lt;/h1>
&lt;p>In the begining, C++ was just C with some object-oriented features tacked on. &lt;code>c++ = C with classes&lt;/code>. 但是到了后来，C++就包含了很多复杂的事物，我们在使用C++的时候可以将其看成四种不同的使用方式。&lt;/p>
&lt;ul>
&lt;li>C语言。 按照C语言的规则去使用，没有模板，没有异常，没有重载&lt;/li>
&lt;li>Object-Oriented C+。这一部分是C with CLasses所追求的，classes, encapsulation, inheritance, polymorphism, virtual。按照面向对象的设计准则去做就好了&lt;/li>
&lt;li>Template C++. 泛型编程&lt;/li>
&lt;li>STL。STL是一个template程序库，对containers, iterators, algorithms 和 Function objects进行了限制。如果在编程中使用了STL, 那就必须遵守STL的规则&lt;/li>
&lt;/ul>
&lt;p>当你使用到其中的几种方式的时候，要习惯对自己的编程方式进行更换&lt;/p></description></item><item><title>Book. Effective C++ item2-尽量使用const, enum, inline替换#define</title><link>http://www.guozet.me/post/EffectiveC++-item2/</link><pubDate>Tue, 11 Sep 2018 02:09:31 +0000</pubDate><guid>http://www.guozet.me/post/EffectiveC++-item2/</guid><description>&lt;h1 id="introduce">Introduce&lt;/h1>
&lt;p>##常规变量&lt;/p>
&lt;p>&lt;code>c++&lt;/code>里面的&lt;code>#define&lt;/code>后面的定义部分，是不算代码的一部分的。所以如果你使用&lt;code>#define&lt;/code>:&lt;/p>
&lt;p>&lt;code>#define ASPECT_RATIO 1.653&lt;/code>&lt;/p>
&lt;p>你希望这个代号&lt;code>ASPECT RATIO&lt;/code>这个代号是能够被编译器加入到记号表（symbol table）里面，如果调试的时候，这个部分出现问题，能够很快的发现出来。但是很多时候我们的预处理器会把这个变量移除，只保留了一个&lt;code>1.653&lt;/code>的常量，如果Debug的时候这个常量出现了错误，你是很难定位到自己需要修改代码的地方的，这就会造成我们在使用中Debug的时候很不方便。我们可以使用另外的方式来定义&lt;/p>
&lt;pre>&lt;code class="language-cpp">const double AspectRatio = 1.653;
&lt;/code>&lt;/pre>
&lt;p>修改之后，AspectRatio这个常量肯定会写入到记号表里面，是可以被编译器找到的。另外使用&lt;code>#define&lt;/code> 可能会造成我们的代码里面有很多的object code 为 1.653, 但是使用&lt;code>const&lt;/code>的方式，我们的代码里面就只会有一个&lt;code>AspectRatio&lt;/code>。&lt;/p>
&lt;p>如果是常量指针(constant pointers), 由于我们的常量一般是定义在&lt;code>头文件&lt;/code>中的，所以我们需要将指针声明为&lt;code>const&lt;/code>。如：&lt;/p>
&lt;p>&lt;code>const char* const authorName = &amp;quot;Scott Meyers&amp;quot;;&lt;/code>&lt;/p>
&lt;p>这里可以修改为&lt;code>String&lt;/code>类型，使用String来存储字符串会比&lt;code>char*&lt;/code>更加的合适，可定义为&lt;code>const std::string authorName(&amp;quot;Scott Meyers&amp;quot;);&lt;/code>&lt;/p>
&lt;h2 id="class内部专属变量">Class内部专属变量&lt;/h2>
&lt;p>**问题：**限制常量的作用域是在Class内部，这样就要将这个常量作为Class的一个membeer， 这样就能够确保这个常量至多只有一个实体，并且必须将其声明为&lt;code>static member&lt;/code>。&lt;/p>
&lt;pre>&lt;code class="language-cpp">class GamePlayer {
private:
static const int NumTurns = 5; //常量声明
int scores[NumTurns];
}
&lt;/code>&lt;/pre>
&lt;p>因为这里面&lt;code>static const int NumTurns = 5;&lt;/code>这是放在类的声明里面的，在这里就是一个变量的声明，并不是变量的定义，在内存里面是没有的。但是c++如果你在其他地方去使用的话，那是需要我们对这个进行先定义在使用的。如果要在其他地方使用，就需要提供一个定义：&lt;/p>
&lt;p>&lt;code>const int GamePlayer::Numturns;&lt;/code>&lt;/p>
&lt;p>这个就可以放在你需要使用&lt;code>GamePlayer::NumTurns&lt;/code>这个变量的文件里面，放在&lt;code>*.cpp&lt;/code>文件里，而不是&lt;code>*.h&lt;/code>文件中。&lt;/p>
&lt;p>**注明:**由于在类的声明中已经给&lt;code>GamePlayer::NumTurns&lt;/code>进行了赋值操作，所以在这里单独直接定义就可以调用声明进行赋值操作。&lt;/p>
&lt;p>另外一种针对老式编译器不支持上述语法的解决方法：&lt;/p>
&lt;pre>&lt;code class="language-cpp">//在头文件中
class CostEstimate {
private:
static const double FudgeFactor; //static class 常量声明
...
}
//在实现文件中去做
const double CostEstimate::FudgeFactor = 1.35;
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;p>上面这种方式可能问题：class在编译区间需要一个class的长两只，就是编译器不允许&lt;code>static const int a&lt;/code> 完成初始设定，这样我们就要使用到 &lt;code>the enum hack&lt;/code>的方式进行补偿。理论：一个属于enumerated type的数值是可以当成ints来使用的&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code class="language-cpp">class GamePlayer {
private:
enum {NumTurns = 5};
int scores[Numturns];
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>说明：&lt;/strong> emum hack定义的内容，是不能够取地址的，取地址的操作是不合法的，而取#define的地址也是不合法的，但是取一个const的地址是合法的。如果不想让其他人获得这个pointer或者reference指向你的整数变量，enum就可以很好的实现这个功能。&lt;/p>
&lt;p>&lt;code>emum&lt;/code>和&lt;code>#define&lt;/code>是绝对不会导致非必要的内存分配的。&lt;/p>
&lt;h2 id="实现宏定义">实现宏定义&lt;/h2>
&lt;p>宏定义看起来像一个函数，但是不会导致函数的调用导致的额外开销，比如：&lt;/p>
&lt;p>&lt;code>#define CALL_WITH_MAX(a,b) f((a) &amp;gt; (b) ?(a):(b)）&lt;/code>&lt;/p>
&lt;p>首先，写这样的宏必须为所有的实参都加上小括号，否则其他地方调用的时候会出现问题。但即使加上了，如果你实现这样的代码：&lt;/p>
&lt;pre>&lt;code class="language-cpp">int a = 5, b = 0;
CALL_WITH_MAX(++a,b);
CALL_WITH_MAX(++a,b+10);
&lt;/code>&lt;/pre>
&lt;p>在调用之前，a会递增之后在去调用，并且是否递增取决与它和谁比较。&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-09-11-EffectiveC++-item2/2018-09-12-19-20-59.png" alt="">&lt;/p>
&lt;p>&lt;img src="http://www.guozet.me/images/in-post/2018-09-11-EffectiveC++-item2/2018-09-12-19-21-37.png" alt="">&lt;/p>
&lt;h2 id="小结">小结&lt;/h2>
&lt;ul>
&lt;li>对于单纯变量，使用const对象或者enums替换&lt;code>#define&lt;/code>&lt;/li>
&lt;li>形如函数的宏，修改为inline函数替换#define&lt;/li>
&lt;/ul></description></item></channel></rss>